{"version":3,"file":"transition-utils.js","sources":["../../src/utils/transition-utils.js"],"sourcesContent":["import { later } from '@ember/runloop';\n\n/**\n * Function that returns a promise that resolves after DOM changes\n * have been flushed and after a browser repaint.\n *\n * @function nextTick\n * @export nextTick\n * @return {Promise} the promise\n */\nexport function nextTick() {\n  return new Promise((resolve) => {\n    window.requestAnimationFrame(() => resolve());\n  });\n}\n\n/**\n * Function that returns a promise that resolves after `ms` milliseconds.\n *\n * @function sleep\n * @export sleep\n * @param {number} ms number of milliseconds after which the promise will resolve\n * @return {Promise} the promise that will resolve after `ms` milliseconds\n */\nexport function sleep(ms) {\n  return new Promise((resolve) => {\n    later(() => resolve(), ms);\n  });\n}\n\n/**\n * Computes the time a css animation will take.\n * Uses `getComputedStyle` to get durations and delays.\n *\n * @function computeTimeout\n * @export computeTimeout\n * @param {Element} element element used calculate the animation duration based on `getComputedStyle`\n * @return {number} the calculated animation duration + delay\n */\nexport function computeTimeout(element) {\n  let {\n    transitionDuration,\n    transitionDelay,\n    animationDuration,\n    animationDelay,\n    animationIterationCount,\n  } = window.getComputedStyle(element);\n\n  // `getComputedStyle` returns durations and delays in the Xs format.\n  // Conveniently if `parseFloat` encounters a character other than a sign (+ or -),\n  // numeral (0-9), a decimal point, or an exponent, it returns the value up to that point\n  // and ignores that character and all succeeding characters.\n\n  let maxDelay = Math.max(\n    parseFloat(animationDelay),\n    parseFloat(transitionDelay),\n  );\n  let maxDuration = Math.max(\n    parseFloat(animationDuration) * parseFloat(animationIterationCount),\n    parseFloat(transitionDuration),\n  );\n\n  return (maxDelay + maxDuration) * 1000;\n}\n"],"names":["nextTick","Promise","resolve","window","requestAnimationFrame","sleep","ms","later","computeTimeout","element","transitionDuration","transitionDelay","animationDuration","animationDelay","animationIterationCount","getComputedStyle","maxDelay","Math","max","parseFloat","maxDuration"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,GAAG;AACzB,EAAA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;AAC9BC,IAAAA,MAAM,CAACC,qBAAqB,CAAC,MAAMF,OAAO,EAAE,CAAC,CAAA;AAC/C,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,KAAKA,CAACC,EAAE,EAAE;AACxB,EAAA,OAAO,IAAIL,OAAO,CAAEC,OAAO,IAAK;AAC9BK,IAAAA,KAAK,CAAC,MAAML,OAAO,EAAE,EAAEI,EAAE,CAAC,CAAA;AAC5B,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,cAAcA,CAACC,OAAO,EAAE;EACtC,IAAI;IACFC,kBAAkB;IAClBC,eAAe;IACfC,iBAAiB;IACjBC,cAAc;AACdC,IAAAA,uBAAAA;AACF,GAAC,GAAGX,MAAM,CAACY,gBAAgB,CAACN,OAAO,CAAC,CAAA;;AAEpC;AACA;AACA;AACA;;AAEA,EAAA,IAAIO,QAAQ,GAAGC,IAAI,CAACC,GAAG,CACrBC,UAAU,CAACN,cAAc,CAAC,EAC1BM,UAAU,CAACR,eAAe,CAC5B,CAAC,CAAA;EACD,IAAIS,WAAW,GAAGH,IAAI,CAACC,GAAG,CACxBC,UAAU,CAACP,iBAAiB,CAAC,GAAGO,UAAU,CAACL,uBAAuB,CAAC,EACnEK,UAAU,CAACT,kBAAkB,CAC/B,CAAC,CAAA;AAED,EAAA,OAAO,CAACM,QAAQ,GAAGI,WAAW,IAAI,IAAI,CAAA;AACxC;;;;"}